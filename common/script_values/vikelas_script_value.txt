#########################
# VIKELAS SCRPIT VALUES #
#########################

############################################################################

#This value is used to create a ranking of the top three winner nations of the Olypics.
vikelas_olympic_success_value = {
	#This part basically creates a rough logarithm of the total population
	if = {
		limit = {
			total_population <= 1000000
		}
		value = 6
	}
	if = {
		limit = {
			total_population > 1000000
			total_population <= 10000000
		}
		value = 7
	}
	if = {
		limit = {
			total_population > 10000000
			total_population <= 100000000
		}
		value = 8
	}
	if = {
		limit = {
			total_population > 100000000
			total_population <= 1000000000
		}
		value = 9
	}
	#The logarithm of the population gets multiplied with the average SOL (higher SOL allows for more free time activities)
	multiply = average_sol
	#Laws that allow some degree of child labor have a negative effect on the score.
	if = {
		limit = {
			has_law = law_type:law_child_labor_allowed
		}
		multiply = 0.5
	}
	if = {
		limit = {
			has_law = law_type:law_restricted_child_labor
		}
		multiply = 0.75
	}
	#Adds the total level of sports facilities of the country
	add = vikelas_sports_facilities_score
	#In case that the country has an athlete it gets a flat 50 bonus
	if = {
		limit = {
			any_scope_character = {
				has_trait = vikelas_athlete
			}
		}
		add = 50
	}
	#If a cyclist won by using free beer, the score gets raised.
	if = {
		limit = {
			has_variable = vikelas_cheating_cyclist_var
		}
		add = 10
	}
	#If a Schwingerkönig wins the wrestling, the score gets raised
	if = {
		limit = {
			has_variable = vikelas_schwingerkonig_won_var
		}
		add = 10
	}
	#If a random athlete becomes a champion, the score gets raised
	if = {
		limit = {
			has_variable = vikelas_random_character_champion_var
		}
		add = 10
	}
	#If the communist athlete gets support, the score gets raised
	if = {
		limit = {
			has_variable = vikelas_communist_character_champion_var
		}
		add = 10
	}
	#If the reactionary athlete gets support, the score gets raised
	if = {
		limit = {
			has_variable = vikelas_reactionary_character_champion_var
		}
		add = 10
	}
	#If an athlete missed their event, the score gets reduced.
	if = {
		limit = {
			has_modifier = vikelas_athlete_missed_event_modifier
		}
		add = -10
	}
	#If a cyclist had an accident, the score gets reduced.
	if = {
		limit = {
			has_variable = vikelas_cyclist_with_accident_var
		}
		add = -10
	}
	#If a cyclist had an accident, the score gets reduced.
	if = {
		limit = {
			has_variable = vikelas_drunken_cyclist_var
		}
		add = -10
	}
	#If the team loses the tug of war, the score gets reduced.
	if = {
		limit = {
			has_variable = vikelas_lost_tug_of_war_var
		}
		add = -10
	}
	#If the the marathon runner takes a hitch, the score gets reduced.
	if = {
		limit = {
			has_variable = vikelas_hitchhiker_var
		}
		add = -5
	}
	#If the the marathon runner gets chased by dogs, the score gets reduced.
	if = {
		limit = {
			has_variable = vikelas_chased_by_dogs_var
		}
		add = -5
	}
	#If the the shooter hits the wrong target, the score gets reduced.
	if = {
		limit = {
			has_variable = vikelas_wrong_target_var
		}
		add = -10
	}
	#Flat bonus for the host
	if = {
		limit = {
			any_scope_state = {
				has_modifier = vikelas_olympics_hosting_modifier
			}
		}
		add = 100
	}
	#Army laws have a positive influence on the score. National Militia helps the most as it usually means military service for a lot of people.
	if = {
		limit = {
			has_law = law_type:law_professional_army
		}
		multiply = 1.2
	}
	if = {
		limit = {
			has_law = law_type:law_national_militia
		}
		multiply = 1.3
	}
	if = {
		limit = {
			has_law = law_type:law_mass_conscription
		}
		multiply = 1.1
	}
	#This is used to randomize the result
	multiply = { 0.9 1.1 }
}

#This value counts the total level of sports facilities of a country
vikelas_sports_facilities_score = {
	value = 0
	every_scope_building = {
		limit = {
			is_building_type = building_government_administration
			has_active_production_method = pm_vikelas_sports_facilities
		}
		add = level
	}
}

#This value is used to create a ranking of the top three winner nations of the Grand Prix Races
vikelas_grand_prix_success_value = {
	#Adds the total level of automobile factories of the country as base value
	value = vikelas_automobile_industry_score
	#Bonus for racer experience (Champion gets 100)
	if = {
		limit = {
			var:vikelas_racer_var = {
				var:vikelas_racer_experience >= 25
			}
		}
		add = 10
	}
	if = {
		limit = {
			var:vikelas_racer_var = {
				var:vikelas_racer_experience >= 50
			}
		}
		add = 15
	}
	if = {
		limit = {
			var:vikelas_racer_var = {
				var:vikelas_racer_experience >= 100
			}
		}
		add = 20
	}
	if = {
		limit = {
			var:vikelas_racer_var = {
				var:vikelas_racer_experience >= 150
			}
		}
		add = 25
	}
	if = {
		limit = {
			var:vikelas_racer_var = {
				var:vikelas_racer_experience >= 150
			}
		}
		add = 30
	}
	#Our Mechanic is the magician and multiplies the sum of industrial power and racer ability
	if = {
		limit = {
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience < 100
			}
		}
		multiply = 1.1
	}
	if = {
		limit = {
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience >= 100
			}
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience < 125
			}
		}
		multiply = 1.2
	}
	if = {
		limit = {
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience >= 125
			}
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience < 150
			}
		}
		multiply = 1.3
	}
	if = {
		limit = {
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience >= 150
			}
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience < 175
			}
		}
		multiply = 1.4
	}
	if = {
		limit = {
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience >= 175
			}
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience < 200
			}
		}
		multiply = 1.5
	}
	if = {
		limit = {
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience >= 200
			}
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience < 225
			}
		}
		multiply = 1.6
	}
	if = {
		limit = {
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience >= 225
			}
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience < 250
			}
		}
		multiply = 1.7
	}
	if = {
		limit = {
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience >= 250
			}
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience < 275
			}
		}
		multiply = 1.8
	}
	if = {
		limit = {
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience >= 275
			}
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience < 300
			}
		}
		multiply = 1.9
	}
	if = {
		limit = {
			var:gaudi_engineer_var = {
				var:gaudi_mechanical_engineer_experience >= 300
			}
		}
		multiply = 2
	}
	#Flat bonus for the host
	if = {
		limit = {
			has_technology_researched = compression_ignition
		}
		add = 15
	}
	#Flat bonus for the host
	if = {
		limit = {
			any_scope_state = {
				has_modifier = vikelas_grand_prix_hosting_modifier
			}
		}
		add = 20
	}
	#Reserved for Event effects
	#if = {
	#	limit = {
	#		has_variable = vikelas_cheating_cyclist_var
	#	}
	#	add = 10
	#}
	#This is used to randomize the result
	multiply = { 0.9 1.1 }
}

#This value counts the total level of automobile factories of the country
vikelas_automobile_industry_score = {
	value = 0
	every_scope_building = {
		limit = {
			is_building_type = building_motor_industry
			has_active_production_method = pm_automobile_production
		}
		add = level
	}
}