# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types building_panels
{
	type condensed_building_information = flowcontainer {
		direction = vertical
		parentanchor = hcenter
		datacontext = "[Building.AccessState]"

		block "animated_building_controls_trigger" {}

		alwaystransparent = no

		### EXPAND / SUBSIDIZE ETC
		widget = {
			size = { @panel_width 40 }

			block "background" {
				background = {
					using = entry_bg_simple
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 5


				vbox = {
					### DOWNSIZE / EXPAND
					building_level_controls = {
						blockoverride "controller_size" {
							size = { 130 35 }
						}
					}

					### BUILD PROGRESS
					hbox = {
						visible = "[Building.HasConstructionQueued]"

						default_progressbar_horizontal = {
							tooltip = "BUILDING_PROGRESS_TOOLTIP"
							size = { 110 5 }

							blockoverride "values" {
								value = "[Building.GetConstructionProgressPercentage]"
								min = 0
								max = 1
							}
						}
					}
				}

				### STATE NAME AND BUTTON
				block "state_name_button" {
					button = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						using = default_button
						onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
						tooltip = "GO_TO_BUTTON_BUILDING"
						using = tooltip_ne

						textbox = {
							size = { 100% 100% }
							margin = { 10 0 }
							align = nobaseline
							elide =  right
							fontsize_min = 14
							text = "[Building.GetState.GetNameNoFormatting]"
						}
					}
				}

				building_auto_expand_icon = {
					visible = "[Building.IsAutoExpanding]"
				}

				building_subsidized_icon = {
					visible = "[Building.IsSubsidized]"
				}

				building_privatize_icon = {
					visible = "[Building.CanBePrivatized]"
				}

				hbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding
					spacing = 10
					margin_right = 2

					expand = {}

					### STATE TRAITS
					hbox = {
						visible = "[Not(IsDataModelEmpty(State.AccessStateRegion.AccessTraits))]"
						datamodel = "[State.AccessStateRegion.AccessTraits]"

						item = {
							icon = {
								size = { 35 35 }
								tooltip = "TOOLTIP_STATE_TRAIT"
								using = tooltip_ne
								onmousehierarchyenter = "[AccessHighlightManager.HighlightStateTrait(StateTrait.Self)]"
								onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
								alwaystransparent = no
								texture = "[StateTrait.GetTexture]"
							}
						}
					}

					### TIMED MODIFIERS
					hbox = {
						visible = "[Not(IsDataModelEmpty(Building.GetTimedModifiers))]"
						margin = { 5 0 }
						datamodel = "[Building.GetTimedModifiers]"
						spacing = 5

						item = {
							icon = {
								tooltip = "[TimedModifier.GetTooltip]"
								texture = "[TimedModifier.GetIcon]"
								size = { 30 30 }
							}
						}
					}

					block "productivity" {
						textbox = {
							visible = "[And(Not(Building.IsGovernmentFunded), Not(Building.IsSubsistenceBuilding))]"
							using = productivity_tooltip_with_graph
							using = tooltip_ne
							raw_text = "@money![Building.GetAverageAnnualEarningsPerEmployeeFormatted|+]"
							align = hcenter|nobaseline
							autoresize = yes
						}
					}

					button_icon_round = {
						size = { 36 36 }
						onclick = "[RightClickMenuManager.ToggleBuildingActions(Building.AccessSelf, PdxGuiWidget.AccessSelf)]"
						tooltip = "SHOW_BUILDING_ACTIONS"
						using = tooltip_ne

						blockoverride "icon" {
							texture = "gfx/interface/buttons/button_icons/menu.dds"
						}

						blockoverride "icon_size" {
							size = { 80% 80% }
						}
					}
				}
			}


		}

		block "divider" {}

		### PMS / EMPLOYMENT / CASH RESERVES
		flowcontainer = {
			minimumsize = { @panel_width 80 }
            direction = vertical
			container = {
				# parentanchor = vcenter # MPM
                minimumsize = { @panel_width 80 } # MPM

				flowcontainer = {
					parentanchor = vcenter
					margin_left = 2
					
					condensed_building_information_pms = {
						blockoverride "pms_slot_sizes" {
							addcolumn = 72
							addrow = 70
						}
						blockoverride "pms_minimumsize" {
							minimumsize = { 208 -1 }
						}
						blockoverride "pms_item_size" {
							size = { 70 70 }
						}
					}
				}

				block "extra_items_in_production_methods_list" {}
                
                building_progressbars = { # MPM - Moved inside of the container
                    position = { -5 0 }
                    parentanchor = right|vcenter

                    blockoverride "progressbar_size" {
                        size = { 230 26 }
                    }
                }
			}
            
            container = { # MPM
                visible = "[GreaterThan_int32(GetDataModelSize(Building.AccessProductionMethodGroups), '(int32)4')]"
                
                flowcontainer = {
                    parentanchor = vcenter
                    margin_left = 2
                    
                    MPM_condensed_building_information_pms_row_2 = {
                        blockoverride "pms_slot_sizes" {
							addcolumn = 72
							addrow = 75 # MPM - Up from 70
						}
						blockoverride "pms_minimumsize" {
							minimumsize = { 208 -1 }
						}
						blockoverride "pms_item_size" {
							size = { 70 70 }
						}
                    }
                }
            }
            
            widget = { # MPM - Spacer
                minimumsize = { 100% 5 }
            }
		}
	}
    
    type condensed_building_information_pms = fixedgridbox {
		name = "tutorial_highlight_condensed_production_methods"
		datamodel = "[DataModelFirst(Building.AccessProductionMethodGroups, '(int32)4')]" # MPM - Only first 4
		flipdirection = yes

		block "pms_slot_sizes" {
			addcolumn = 52
			addrow = 50
		}
		parentanchor = vcenter

		block "pms_minimumsize" {
			minimumsize = { 208 -1 }
		}

		item = {
			widget = {
				block "pms_item_size" {
					size = { 50 50 }
				}
				datacontext = "[Building.AccessProductionMethod(ProductionMethodGroup.Self)]"
				datacontext = "[ProductionMethod]"
				datacontext = "[Building]"
				datacontext = "[ProductionMethodGroup]"
				using = tooltip_ne
				tooltip = "CHANGE_FROM_CURRENT_PRODUCTION_METHOD_TOOLTIP"

				button = {
					visible = "[NotEqualTo_int32( GetDataModelSize( ProductionMethodGroup.AccessBuildingProductionMethods( Building.Self ) ), '(int32)1' )]"
					using = expand_button_bg_dropdown
					size = { 100% 100% }
					onclick = "[RightClickMenuManager.ToggleSwitchProductionMethodMenu(Building.AccessSelf, ProductionMethodGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
				}

				icon = {
					size = { 80% 80% }
					parentanchor = center
					texture = "[ProductionMethod.GetTexture]"
				}

				### new pm
				has_new_pm_icon = {
					position = { -2 2 }
					parentanchor = bottom|left
					blockoverride "visible" {
						visible = "[And(Building.IsOwner( GetPlayer.Self ), GetPlayer.HasNewProductionMethodInSameGroup( Building.GetBuildingType.Self, ProductionMethod.Self ))]"
					}
				}

				### nr available
				textbox = {
					raw_text = "#P #bold [ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf)]#!#!"
					parentanchor = top|right
					position = { -5 0 }
					autoresize = yes
					align = right|nobaseline
					block "pms_number_visibility" {
						visible = "[NotEqualTo_int32( ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf), '(int32)1')]"
					}
					tooltip = "PRODUCTION_METHOD_OPTIONS"
					using = tooltip_above
					using = fontsize_small

					background = {
						using = default_background
						margin = { 8 4 }

					}
				}
			}
		}
	}
    
    # Duplicate of `condensed_building_information_pms` but skips first 4 instead
    type MPM_condensed_building_information_pms_row_2 = fixedgridbox {
        name = "tutorial_highlight_condensed_production_methods"
		datamodel = "[DataModelSkipFirst(Building.AccessProductionMethodGroups, '(int32)4')]" # MPM - Skip first 4
		flipdirection = yes
        
        block "pm_wrap" {
            datamodel_wrap = 7 # MPM
        }

		block "pms_slot_sizes" {
			addcolumn = 52
			addrow = 50
		}
		parentanchor = vcenter

		block "pms_minimumsize" {
			minimumsize = { 208 -1 }
		}

		item = {
			widget = {
				block "pms_item_size" {
					size = { 50 50 }
				}
				datacontext = "[Building.AccessProductionMethod(ProductionMethodGroup.Self)]"
				datacontext = "[ProductionMethod]"
				datacontext = "[Building]"
				datacontext = "[ProductionMethodGroup]"
				using = tooltip_above
				tooltip = "CHANGE_FROM_CURRENT_PRODUCTION_METHOD_TOOLTIP"

				button = {
					visible = "[NotEqualTo_int32( GetDataModelSize( ProductionMethodGroup.AccessBuildingProductionMethods( Building.Self ) ), '(int32)1' )]"
					using = expand_button_bg_dropdown
					size = { 100% 100% }
					onclick = "[RightClickMenuManager.ToggleSwitchProductionMethodMenu(Building.AccessSelf, ProductionMethodGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
				}

				icon = {
					size = { 80% 80% }
					parentanchor = center
					texture = "[ProductionMethod.GetTexture]"
				}

				### new pm
				has_new_pm_icon = {
					position = { -2 2 }
					parentanchor = bottom|left
					blockoverride "visible" {
						visible = "[And(Building.IsOwner( GetPlayer.Self ), GetPlayer.HasNewProductionMethodInSameGroup( Building.GetBuildingType.Self, ProductionMethod.Self ))]"
					}
				}

				### nr available
				textbox = {
					raw_text = "#P #bold [ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf)]#!#!"
					parentanchor = top|right
					position = { -5 0 }
					autoresize = yes
					align = right|nobaseline
					block "pms_number_visibility" {
						visible = "[NotEqualTo_int32( ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf), '(int32)1')]"
					}
					tooltip = "PRODUCTION_METHOD_OPTIONS"
					using = tooltip_above
					using = fontsize_small

					background = {
						using = default_background
						margin = { 8 4 }

					}
				}
			}
		}
	}
}
